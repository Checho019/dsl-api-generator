package org.example.cup;

import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.example.generator.models.*;

parser code
{:
    private Symbol s;
    @Override
    public void syntax_error(Symbol s) {
        this.s = s;
        System.err.println("Syntax error at line " + s.left + ", column " + s.right + ": " + s.value);
    }
    public Symbol getSymbol() {
        return this.s;
    }
:};

terminal AS, FOR, IS,                                                               // Definition
         ENTITY, CONTROLLER, VALIDATIONS, CRUD, DATASOURCE,                         // Definable
         NOT, NULL, EMPTY, GREATER_THAN, LESS_THAN, EQUALS_TO, UNIQUE,              // Constrains
         GET_BY_ID, GET_ALL, UPDATE, DELETE, SAVE,                                  // Basic CRUD actions
         GET_BY, AND,                                                               // JPA Like Controller actions
         DBMS, DBMS_SERVER, IP, DATABASE, USERNAME, PASSWORD,                       // Datasource Configuration
         STRING, INTEGER, LONG, BOOLEAN, FLOAT,                                     // Data types
         IDENTIFIER,                                         // Identifier
         NUMBER, STRING_LITERAL,                                                    // Data
         LBRACE, RBRACE, ERROR;                                                     // Symbols

non terminal Program;
non terminal Definition, EntityDef, DefinitionList, ValidationDef, ControllerDef, DatasourceDef;
non terminal AttributeDef, ValidationExpr, ControllerExpr, DatasourceConf;
non terminal DataType, PreConstrain, Constrain, Comparation;
non terminal ControllerAction, Query;
non terminal DSdbms, DSip, DSdatabase, DSusername, DSpassword;

// Begin
start with Program;

Program ::= DefinitionList;

DefinitionList ::= Definition | Definition DefinitionList;
Definition ::= EntityDef | ValidationDef | ControllerDef | DatasourceDef;

// Entity Definition
EntityDef ::= ENTITY IDENTIFIER LBRACE AttributeDef RBRACE;

AttributeDef ::= IDENTIFIER AS DataType | IDENTIFIER AS DataType AttributeDef;
DataType ::= STRING | INTEGER | LONG | BOOLEAN| FLOAT;

// Validations
ValidationDef ::= VALIDATIONS FOR IDENTIFIER LBRACE ValidationExpr RBRACE;
ValidationExpr ::= IDENTIFIER IS PreConstrain | IDENTIFIER IS PreConstrain ValidationExpr;
PreConstrain ::= Constrain | NOT Constrain | UNIQUE;
Constrain ::= Comparation NUMBER | NULL | EMPTY;
Comparation ::= GREATER_THAN | LESS_THAN | EQUALS_TO;

// Controller Definition
ControllerDef ::= CONTROLLER FOR IDENTIFIER LBRACE ControllerExpr RBRACE |
                  CRUD FOR IDENTIFIER;
ControllerExpr ::= ControllerAction | ControllerAction ControllerExpr;
ControllerAction ::= GET_ALL | GET_BY_ID | UPDATE | SAVE | DELETE | GET_BY Query;
Query ::= IDENTIFIER | IDENTIFIER AND Query;

// Configuration
DatasourceDef ::= DATASOURCE LBRACE DatasourceConf RBRACE;
DatasourceConf ::= DSdbms DSip DSdatabase DSusername DSpassword;
DSdbms ::= DBMS IS DBMS_SERVER;
DSip ::= IP IS STRING_LITERAL;
DSdatabase ::= DATABASE IS STRING_LITERAL;
DSusername ::= USERNAME IS STRING_LITERAL;
DSpassword ::= PASSWORD IS STRING_LITERAL;